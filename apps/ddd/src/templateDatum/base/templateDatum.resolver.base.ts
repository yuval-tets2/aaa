/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTemplateDatumArgs } from "./CreateTemplateDatumArgs";
import { UpdateTemplateDatumArgs } from "./UpdateTemplateDatumArgs";
import { DeleteTemplateDatumArgs } from "./DeleteTemplateDatumArgs";
import { TemplateDatumCountArgs } from "./TemplateDatumCountArgs";
import { TemplateDatumFindManyArgs } from "./TemplateDatumFindManyArgs";
import { TemplateDatumFindUniqueArgs } from "./TemplateDatumFindUniqueArgs";
import { TemplateDatum } from "./TemplateDatum";
import { TemplateItemFindManyArgs } from "../../templateItem/base/TemplateItemFindManyArgs";
import { TemplateItem } from "../../templateItem/base/TemplateItem";
import { Template } from "../../template/base/Template";
import { TemplateDatumService } from "../templateDatum.service";
@graphql.Resolver(() => TemplateDatum)
export class TemplateDatumResolverBase {
  constructor(protected readonly service: TemplateDatumService) {}

  async _templateDataMeta(
    @graphql.Args() args: TemplateDatumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TemplateDatum])
  async templateData(
    @graphql.Args() args: TemplateDatumFindManyArgs
  ): Promise<TemplateDatum[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TemplateDatum, { nullable: true })
  async templateDatum(
    @graphql.Args() args: TemplateDatumFindUniqueArgs
  ): Promise<TemplateDatum | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TemplateDatum)
  async createTemplateDatum(
    @graphql.Args() args: CreateTemplateDatumArgs
  ): Promise<TemplateDatum> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        template: {
          connect: args.data.template,
        },
      },
    });
  }

  @graphql.Mutation(() => TemplateDatum)
  async updateTemplateDatum(
    @graphql.Args() args: UpdateTemplateDatumArgs
  ): Promise<TemplateDatum | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          template: {
            connect: args.data.template,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TemplateDatum)
  async deleteTemplateDatum(
    @graphql.Args() args: DeleteTemplateDatumArgs
  ): Promise<TemplateDatum | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TemplateItem], { name: "items" })
  async resolveFieldItems(
    @graphql.Parent() parent: TemplateDatum,
    @graphql.Args() args: TemplateItemFindManyArgs
  ): Promise<TemplateItem[]> {
    const results = await this.service.findItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Template, {
    nullable: true,
    name: "template",
  })
  async resolveFieldTemplate(
    @graphql.Parent() parent: TemplateDatum
  ): Promise<Template | null> {
    const result = await this.service.getTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
