/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreatePlanArgs } from "./CreatePlanArgs";
import { UpdatePlanArgs } from "./UpdatePlanArgs";
import { DeletePlanArgs } from "./DeletePlanArgs";
import { PlanCountArgs } from "./PlanCountArgs";
import { PlanFindManyArgs } from "./PlanFindManyArgs";
import { PlanFindUniqueArgs } from "./PlanFindUniqueArgs";
import { Plan } from "./Plan";
import { SemesterFindManyArgs } from "../../semester/base/SemesterFindManyArgs";
import { Semester } from "../../semester/base/Semester";
import { DegreeRequirement } from "../../degreeRequirement/base/DegreeRequirement";
import { User } from "../../user/base/User";
import { PlanService } from "../plan.service";
@graphql.Resolver(() => Plan)
export class PlanResolverBase {
  constructor(protected readonly service: PlanService) {}

  async _plansMeta(
    @graphql.Args() args: PlanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Plan])
  async plans(@graphql.Args() args: PlanFindManyArgs): Promise<Plan[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Plan, { nullable: true })
  async plan(@graphql.Args() args: PlanFindUniqueArgs): Promise<Plan | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Plan)
  async createPlan(@graphql.Args() args: CreatePlanArgs): Promise<Plan> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        requirements: args.data.requirements
          ? {
              connect: args.data.requirements,
            }
          : undefined,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => Plan)
  async updatePlan(@graphql.Args() args: UpdatePlanArgs): Promise<Plan | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          requirements: args.data.requirements
            ? {
                connect: args.data.requirements,
              }
            : undefined,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Plan)
  async deletePlan(@graphql.Args() args: DeletePlanArgs): Promise<Plan | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Semester], { name: "semesters" })
  async resolveFieldSemesters(
    @graphql.Parent() parent: Plan,
    @graphql.Args() args: SemesterFindManyArgs
  ): Promise<Semester[]> {
    const results = await this.service.findSemesters(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => DegreeRequirement, {
    nullable: true,
    name: "requirements",
  })
  async resolveFieldRequirements(
    @graphql.Parent() parent: Plan
  ): Promise<DegreeRequirement | null> {
    const result = await this.service.getRequirements(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(@graphql.Parent() parent: Plan): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
