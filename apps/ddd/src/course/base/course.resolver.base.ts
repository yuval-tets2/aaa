/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCourseArgs } from "./CreateCourseArgs";
import { UpdateCourseArgs } from "./UpdateCourseArgs";
import { DeleteCourseArgs } from "./DeleteCourseArgs";
import { CourseCountArgs } from "./CourseCountArgs";
import { CourseFindManyArgs } from "./CourseFindManyArgs";
import { CourseFindUniqueArgs } from "./CourseFindUniqueArgs";
import { Course } from "./Course";
import { Semester } from "../../semester/base/Semester";
import { CourseService } from "../course.service";
@graphql.Resolver(() => Course)
export class CourseResolverBase {
  constructor(protected readonly service: CourseService) {}

  async _coursesMeta(
    @graphql.Args() args: CourseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Course])
  async courses(@graphql.Args() args: CourseFindManyArgs): Promise<Course[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Course, { nullable: true })
  async course(
    @graphql.Args() args: CourseFindUniqueArgs
  ): Promise<Course | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Course)
  async createCourse(@graphql.Args() args: CreateCourseArgs): Promise<Course> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        semester: {
          connect: args.data.semester,
        },
      },
    });
  }

  @graphql.Mutation(() => Course)
  async updateCourse(
    @graphql.Args() args: UpdateCourseArgs
  ): Promise<Course | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          semester: {
            connect: args.data.semester,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Course)
  async deleteCourse(
    @graphql.Args() args: DeleteCourseArgs
  ): Promise<Course | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Semester, {
    nullable: true,
    name: "semester",
  })
  async resolveFieldSemester(
    @graphql.Parent() parent: Course
  ): Promise<Semester | null> {
    const result = await this.service.getSemester(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
