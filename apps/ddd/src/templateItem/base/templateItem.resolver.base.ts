/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTemplateItemArgs } from "./CreateTemplateItemArgs";
import { UpdateTemplateItemArgs } from "./UpdateTemplateItemArgs";
import { DeleteTemplateItemArgs } from "./DeleteTemplateItemArgs";
import { TemplateItemCountArgs } from "./TemplateItemCountArgs";
import { TemplateItemFindManyArgs } from "./TemplateItemFindManyArgs";
import { TemplateItemFindUniqueArgs } from "./TemplateItemFindUniqueArgs";
import { TemplateItem } from "./TemplateItem";
import { TemplateDatum } from "../../templateDatum/base/TemplateDatum";
import { TemplateItemService } from "../templateItem.service";
@graphql.Resolver(() => TemplateItem)
export class TemplateItemResolverBase {
  constructor(protected readonly service: TemplateItemService) {}

  async _templateItemsMeta(
    @graphql.Args() args: TemplateItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TemplateItem])
  async templateItems(
    @graphql.Args() args: TemplateItemFindManyArgs
  ): Promise<TemplateItem[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TemplateItem, { nullable: true })
  async templateItem(
    @graphql.Args() args: TemplateItemFindUniqueArgs
  ): Promise<TemplateItem | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TemplateItem)
  async createTemplateItem(
    @graphql.Args() args: CreateTemplateItemArgs
  ): Promise<TemplateItem> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        templateData: {
          connect: args.data.templateData,
        },
      },
    });
  }

  @graphql.Mutation(() => TemplateItem)
  async updateTemplateItem(
    @graphql.Args() args: UpdateTemplateItemArgs
  ): Promise<TemplateItem | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          templateData: {
            connect: args.data.templateData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TemplateItem)
  async deleteTemplateItem(
    @graphql.Args() args: DeleteTemplateItemArgs
  ): Promise<TemplateItem | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => TemplateDatum, {
    nullable: true,
    name: "templateData",
  })
  async resolveFieldTemplateData(
    @graphql.Parent() parent: TemplateItem
  ): Promise<TemplateDatum | null> {
    const result = await this.service.getTemplateData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
