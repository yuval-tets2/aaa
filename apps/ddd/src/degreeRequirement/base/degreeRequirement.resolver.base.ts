/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateDegreeRequirementArgs } from "./CreateDegreeRequirementArgs";
import { UpdateDegreeRequirementArgs } from "./UpdateDegreeRequirementArgs";
import { DeleteDegreeRequirementArgs } from "./DeleteDegreeRequirementArgs";
import { DegreeRequirementCountArgs } from "./DegreeRequirementCountArgs";
import { DegreeRequirementFindManyArgs } from "./DegreeRequirementFindManyArgs";
import { DegreeRequirementFindUniqueArgs } from "./DegreeRequirementFindUniqueArgs";
import { DegreeRequirement } from "./DegreeRequirement";
import { Plan } from "../../plan/base/Plan";
import { DegreeRequirementService } from "../degreeRequirement.service";
@graphql.Resolver(() => DegreeRequirement)
export class DegreeRequirementResolverBase {
  constructor(protected readonly service: DegreeRequirementService) {}

  async _degreeRequirementsMeta(
    @graphql.Args() args: DegreeRequirementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DegreeRequirement])
  async degreeRequirements(
    @graphql.Args() args: DegreeRequirementFindManyArgs
  ): Promise<DegreeRequirement[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => DegreeRequirement, { nullable: true })
  async degreeRequirement(
    @graphql.Args() args: DegreeRequirementFindUniqueArgs
  ): Promise<DegreeRequirement | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DegreeRequirement)
  async createDegreeRequirement(
    @graphql.Args() args: CreateDegreeRequirementArgs
  ): Promise<DegreeRequirement> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        plan: {
          connect: args.data.plan,
        },
      },
    });
  }

  @graphql.Mutation(() => DegreeRequirement)
  async updateDegreeRequirement(
    @graphql.Args() args: UpdateDegreeRequirementArgs
  ): Promise<DegreeRequirement | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          plan: {
            connect: args.data.plan,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DegreeRequirement)
  async deleteDegreeRequirement(
    @graphql.Args() args: DeleteDegreeRequirementArgs
  ): Promise<DegreeRequirement | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Plan, {
    nullable: true,
    name: "plan",
  })
  async resolveFieldPlan(
    @graphql.Parent() parent: DegreeRequirement
  ): Promise<Plan | null> {
    const result = await this.service.getPlan(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
