/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSemesterArgs } from "./CreateSemesterArgs";
import { UpdateSemesterArgs } from "./UpdateSemesterArgs";
import { DeleteSemesterArgs } from "./DeleteSemesterArgs";
import { SemesterCountArgs } from "./SemesterCountArgs";
import { SemesterFindManyArgs } from "./SemesterFindManyArgs";
import { SemesterFindUniqueArgs } from "./SemesterFindUniqueArgs";
import { Semester } from "./Semester";
import { CourseFindManyArgs } from "../../course/base/CourseFindManyArgs";
import { Course } from "../../course/base/Course";
import { Plan } from "../../plan/base/Plan";
import { SemesterService } from "../semester.service";
@graphql.Resolver(() => Semester)
export class SemesterResolverBase {
  constructor(protected readonly service: SemesterService) {}

  async _semestersMeta(
    @graphql.Args() args: SemesterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Semester])
  async semesters(
    @graphql.Args() args: SemesterFindManyArgs
  ): Promise<Semester[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Semester, { nullable: true })
  async semester(
    @graphql.Args() args: SemesterFindUniqueArgs
  ): Promise<Semester | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Semester)
  async createSemester(
    @graphql.Args() args: CreateSemesterArgs
  ): Promise<Semester> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        plan: {
          connect: args.data.plan,
        },
      },
    });
  }

  @graphql.Mutation(() => Semester)
  async updateSemester(
    @graphql.Args() args: UpdateSemesterArgs
  ): Promise<Semester | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          plan: {
            connect: args.data.plan,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Semester)
  async deleteSemester(
    @graphql.Args() args: DeleteSemesterArgs
  ): Promise<Semester | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Course], { name: "courses" })
  async resolveFieldCourses(
    @graphql.Parent() parent: Semester,
    @graphql.Args() args: CourseFindManyArgs
  ): Promise<Course[]> {
    const results = await this.service.findCourses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Plan, {
    nullable: true,
    name: "plan",
  })
  async resolveFieldPlan(
    @graphql.Parent() parent: Semester
  ): Promise<Plan | null> {
    const result = await this.service.getPlan(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
