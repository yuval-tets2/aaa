datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model TemplateDatum {
  id         String         @id @default(cuid()) @db.Uuid()
  items      TemplateItem[]
  semester   Int
  template   Template       @relation(fields: [templateId], references: [id])
  templateId String

  @@map("TemplateData")
}

model TemplateItem {
  id             String               @id @default(cuid()) @db.Uuid()
  name           String
  templateData   TemplateDatum        @relation(fields: [templateDataId], references: [id])
  templateDataId String
  type           EnumTemplateItemType @default(CORE)
}

model Template {
  id           String          @id @default(cuid()) @db.Uuid()
  name         String?
  templateData TemplateDatum[]
}

model Profile {
  endSemester   EnumProfileEndSemester
  endYear       Int
  id            String                   @id @default(cuid()) @db.Uuid()
  name          String
  startSemester EnumProfileStartSemester
  startYear     Int
  user          User                     @relation(fields: [userId], references: [id])
  userId        String                   @unique
}

model Plan {
  createdAt       DateTime              @default(now()) @map("created_at")
  endSemester     EnumPlanEndSemester
  endYear         Int
  id              String                @id @default(cuid()) @db.Uuid()
  name            String
  requirements    DegreeRequirement?
  semesters       Semester[]
  startSemester   EnumPlanStartSemester
  startYear       Int
  transferCredits String
  updatedAt       DateTime              @default(now()) @map("updated_at")
  user            User                  @relation(fields: [userId], references: [id])
  userId          String
}

model DegreeRequirement {
  bypasses String
  id       String @id @default(cuid()) @db.Uuid()
  major    String
  plan     Plan   @relation(fields: [planId], references: [id])
  planId   String @unique

  @@map("DegreeRequirements")
}

model Bypass {
  courseCode  String
  hours       Int
  id          String @id @default(cuid()) @db.Uuid()
  requirement String
}

model Course {
  code            String
  color           String   @default("")
  id              String   @id @default(cuid()) @db.Uuid()
  locked          Boolean  @default(false)
  prereqOverriden Boolean  @default(false)
  semester        Semester @relation(fields: [semesterId], references: [id])
  semesterId      String

  @@unique([semesterId, code])
}

model Semester {
  color    String               @default("")
  courses  Course[]
  id       String               @id @default(cuid()) @db.Uuid()
  locked   Boolean              @default(false)
  plan     Plan                 @relation(fields: [planId], references: [id])
  planId   String
  semester EnumSemesterSemester
  year     Int
}

model AcademicDetail {
  id Int @id @default(autoincrement())

  @@map("AcademicDetails")
}

model Account {
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  id                String  @id @default(cuid()) @db.Uuid()
  idToken           String? @map("id_token")
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  scope             String?
  sessionState      String? @map("session_state")
  tokenType         String? @map("token_type")
  typeField         String  @map("type")
  user              User    @relation(fields: [userId], references: [id])
  userId            String

  @@unique([provider, providerAccountId])
}

model Session {
  expires      DateTime
  id           String   @id @default(cuid()) @db.Uuid()
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

model User {
  accounts                Account[]
  email                   String?   @unique
  emailVerified           DateTime?
  id                      String    @id @default(cuid()) @db.Uuid()
  onboardingComplete      Boolean   @default(false)
  plans                   Plan[]
  profile                 Profile?
  seenHomeOnboardingModal Boolean   @default(false)
  seenPlanOnboardingModal Boolean   @default(false)
  sessions                Session[]
}

model VerificationToken {
  expires    DateTime
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique

  @@unique([identifier, token])
}

enum EnumTemplateItemType {
  CORE
  OPTIONAL
}

enum EnumProfileEndSemester {
  f
  s
  u
}

enum EnumProfileStartSemester {
  f
  s
  u
}

enum EnumPlanEndSemester {
  f
  s
  u
}

enum EnumPlanStartSemester {
  f
  s
  u
}

enum EnumSemesterSemester {
  f
  s
  u
}
