/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateWebsiteEventArgs } from "./CreateWebsiteEventArgs";
import { UpdateWebsiteEventArgs } from "./UpdateWebsiteEventArgs";
import { DeleteWebsiteEventArgs } from "./DeleteWebsiteEventArgs";
import { WebsiteEventCountArgs } from "./WebsiteEventCountArgs";
import { WebsiteEventFindManyArgs } from "./WebsiteEventFindManyArgs";
import { WebsiteEventFindUniqueArgs } from "./WebsiteEventFindUniqueArgs";
import { WebsiteEvent } from "./WebsiteEvent";
import { EventDatumFindManyArgs } from "../../eventDatum/base/EventDatumFindManyArgs";
import { EventDatum } from "../../eventDatum/base/EventDatum";
import { Session } from "../../session/base/Session";
import { WebsiteEventService } from "../websiteEvent.service";
@graphql.Resolver(() => WebsiteEvent)
export class WebsiteEventResolverBase {
  constructor(protected readonly service: WebsiteEventService) {}

  async _websiteEventsMeta(
    @graphql.Args() args: WebsiteEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WebsiteEvent])
  async websiteEvents(
    @graphql.Args() args: WebsiteEventFindManyArgs
  ): Promise<WebsiteEvent[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => WebsiteEvent, { nullable: true })
  async websiteEvent(
    @graphql.Args() args: WebsiteEventFindUniqueArgs
  ): Promise<WebsiteEvent | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WebsiteEvent)
  async createWebsiteEvent(
    @graphql.Args() args: CreateWebsiteEventArgs
  ): Promise<WebsiteEvent> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        session: {
          connect: args.data.session,
        },
      },
    });
  }

  @graphql.Mutation(() => WebsiteEvent)
  async updateWebsiteEvent(
    @graphql.Args() args: UpdateWebsiteEventArgs
  ): Promise<WebsiteEvent | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          session: {
            connect: args.data.session,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebsiteEvent)
  async deleteWebsiteEvent(
    @graphql.Args() args: DeleteWebsiteEventArgs
  ): Promise<WebsiteEvent | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EventDatum], { name: "eventData" })
  async resolveFieldEventData(
    @graphql.Parent() parent: WebsiteEvent,
    @graphql.Args() args: EventDatumFindManyArgs
  ): Promise<EventDatum[]> {
    const results = await this.service.findEventData(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Session, {
    nullable: true,
    name: "session",
  })
  async resolveFieldSession(
    @graphql.Parent() parent: WebsiteEvent
  ): Promise<Session | null> {
    const result = await this.service.getSession(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
