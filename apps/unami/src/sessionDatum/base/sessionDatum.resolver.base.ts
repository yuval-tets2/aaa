/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSessionDatumArgs } from "./CreateSessionDatumArgs";
import { UpdateSessionDatumArgs } from "./UpdateSessionDatumArgs";
import { DeleteSessionDatumArgs } from "./DeleteSessionDatumArgs";
import { SessionDatumCountArgs } from "./SessionDatumCountArgs";
import { SessionDatumFindManyArgs } from "./SessionDatumFindManyArgs";
import { SessionDatumFindUniqueArgs } from "./SessionDatumFindUniqueArgs";
import { SessionDatum } from "./SessionDatum";
import { Session } from "../../session/base/Session";
import { Website } from "../../website/base/Website";
import { SessionDatumService } from "../sessionDatum.service";
@graphql.Resolver(() => SessionDatum)
export class SessionDatumResolverBase {
  constructor(protected readonly service: SessionDatumService) {}

  async _sessionDataMeta(
    @graphql.Args() args: SessionDatumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SessionDatum])
  async sessionData(
    @graphql.Args() args: SessionDatumFindManyArgs
  ): Promise<SessionDatum[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SessionDatum, { nullable: true })
  async sessionDatum(
    @graphql.Args() args: SessionDatumFindUniqueArgs
  ): Promise<SessionDatum | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SessionDatum)
  async createSessionDatum(
    @graphql.Args() args: CreateSessionDatumArgs
  ): Promise<SessionDatum> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        session: {
          connect: args.data.session,
        },

        website: {
          connect: args.data.website,
        },
      },
    });
  }

  @graphql.Mutation(() => SessionDatum)
  async updateSessionDatum(
    @graphql.Args() args: UpdateSessionDatumArgs
  ): Promise<SessionDatum | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          session: {
            connect: args.data.session,
          },

          website: {
            connect: args.data.website,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SessionDatum)
  async deleteSessionDatum(
    @graphql.Args() args: DeleteSessionDatumArgs
  ): Promise<SessionDatum | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Session, {
    nullable: true,
    name: "session",
  })
  async resolveFieldSession(
    @graphql.Parent() parent: SessionDatum
  ): Promise<Session | null> {
    const result = await this.service.getSession(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Website, {
    nullable: true,
    name: "website",
  })
  async resolveFieldWebsite(
    @graphql.Parent() parent: SessionDatum
  ): Promise<Website | null> {
    const result = await this.service.getWebsite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
