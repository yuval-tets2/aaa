/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTeamWebsiteArgs } from "./CreateTeamWebsiteArgs";
import { UpdateTeamWebsiteArgs } from "./UpdateTeamWebsiteArgs";
import { DeleteTeamWebsiteArgs } from "./DeleteTeamWebsiteArgs";
import { TeamWebsiteCountArgs } from "./TeamWebsiteCountArgs";
import { TeamWebsiteFindManyArgs } from "./TeamWebsiteFindManyArgs";
import { TeamWebsiteFindUniqueArgs } from "./TeamWebsiteFindUniqueArgs";
import { TeamWebsite } from "./TeamWebsite";
import { Team } from "../../team/base/Team";
import { Website } from "../../website/base/Website";
import { TeamWebsiteService } from "../teamWebsite.service";
@graphql.Resolver(() => TeamWebsite)
export class TeamWebsiteResolverBase {
  constructor(protected readonly service: TeamWebsiteService) {}

  async _teamWebsitesMeta(
    @graphql.Args() args: TeamWebsiteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TeamWebsite])
  async teamWebsites(
    @graphql.Args() args: TeamWebsiteFindManyArgs
  ): Promise<TeamWebsite[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TeamWebsite, { nullable: true })
  async teamWebsite(
    @graphql.Args() args: TeamWebsiteFindUniqueArgs
  ): Promise<TeamWebsite | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TeamWebsite)
  async createTeamWebsite(
    @graphql.Args() args: CreateTeamWebsiteArgs
  ): Promise<TeamWebsite> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        team: {
          connect: args.data.team,
        },

        website: {
          connect: args.data.website,
        },
      },
    });
  }

  @graphql.Mutation(() => TeamWebsite)
  async updateTeamWebsite(
    @graphql.Args() args: UpdateTeamWebsiteArgs
  ): Promise<TeamWebsite | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          team: {
            connect: args.data.team,
          },

          website: {
            connect: args.data.website,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeamWebsite)
  async deleteTeamWebsite(
    @graphql.Args() args: DeleteTeamWebsiteArgs
  ): Promise<TeamWebsite | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  async resolveFieldTeam(
    @graphql.Parent() parent: TeamWebsite
  ): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Website, {
    nullable: true,
    name: "website",
  })
  async resolveFieldWebsite(
    @graphql.Parent() parent: TeamWebsite
  ): Promise<Website | null> {
    const result = await this.service.getWebsite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
