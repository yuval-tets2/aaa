/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEventDatumArgs } from "./CreateEventDatumArgs";
import { UpdateEventDatumArgs } from "./UpdateEventDatumArgs";
import { DeleteEventDatumArgs } from "./DeleteEventDatumArgs";
import { EventDatumCountArgs } from "./EventDatumCountArgs";
import { EventDatumFindManyArgs } from "./EventDatumFindManyArgs";
import { EventDatumFindUniqueArgs } from "./EventDatumFindUniqueArgs";
import { EventDatum } from "./EventDatum";
import { Website } from "../../website/base/Website";
import { WebsiteEvent } from "../../websiteEvent/base/WebsiteEvent";
import { EventDatumService } from "../eventDatum.service";
@graphql.Resolver(() => EventDatum)
export class EventDatumResolverBase {
  constructor(protected readonly service: EventDatumService) {}

  async _eventDataMeta(
    @graphql.Args() args: EventDatumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EventDatum])
  async eventData(
    @graphql.Args() args: EventDatumFindManyArgs
  ): Promise<EventDatum[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EventDatum, { nullable: true })
  async eventDatum(
    @graphql.Args() args: EventDatumFindUniqueArgs
  ): Promise<EventDatum | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EventDatum)
  async createEventDatum(
    @graphql.Args() args: CreateEventDatumArgs
  ): Promise<EventDatum> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        website: {
          connect: args.data.website,
        },

        websiteEvent: {
          connect: args.data.websiteEvent,
        },
      },
    });
  }

  @graphql.Mutation(() => EventDatum)
  async updateEventDatum(
    @graphql.Args() args: UpdateEventDatumArgs
  ): Promise<EventDatum | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          website: {
            connect: args.data.website,
          },

          websiteEvent: {
            connect: args.data.websiteEvent,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventDatum)
  async deleteEventDatum(
    @graphql.Args() args: DeleteEventDatumArgs
  ): Promise<EventDatum | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Website, {
    nullable: true,
    name: "website",
  })
  async resolveFieldWebsite(
    @graphql.Parent() parent: EventDatum
  ): Promise<Website | null> {
    const result = await this.service.getWebsite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => WebsiteEvent, {
    nullable: true,
    name: "websiteEvent",
  })
  async resolveFieldWebsiteEvent(
    @graphql.Parent() parent: EventDatum
  ): Promise<WebsiteEvent | null> {
    const result = await this.service.getWebsiteEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
