/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTeamUserArgs } from "./CreateTeamUserArgs";
import { UpdateTeamUserArgs } from "./UpdateTeamUserArgs";
import { DeleteTeamUserArgs } from "./DeleteTeamUserArgs";
import { TeamUserCountArgs } from "./TeamUserCountArgs";
import { TeamUserFindManyArgs } from "./TeamUserFindManyArgs";
import { TeamUserFindUniqueArgs } from "./TeamUserFindUniqueArgs";
import { TeamUser } from "./TeamUser";
import { Team } from "../../team/base/Team";
import { User } from "../../user/base/User";
import { TeamUserService } from "../teamUser.service";
@graphql.Resolver(() => TeamUser)
export class TeamUserResolverBase {
  constructor(protected readonly service: TeamUserService) {}

  async _teamUsersMeta(
    @graphql.Args() args: TeamUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TeamUser])
  async teamUsers(
    @graphql.Args() args: TeamUserFindManyArgs
  ): Promise<TeamUser[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TeamUser, { nullable: true })
  async teamUser(
    @graphql.Args() args: TeamUserFindUniqueArgs
  ): Promise<TeamUser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TeamUser)
  async createTeamUser(
    @graphql.Args() args: CreateTeamUserArgs
  ): Promise<TeamUser> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        team: {
          connect: args.data.team,
        },

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => TeamUser)
  async updateTeamUser(
    @graphql.Args() args: UpdateTeamUserArgs
  ): Promise<TeamUser | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          team: {
            connect: args.data.team,
          },

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeamUser)
  async deleteTeamUser(
    @graphql.Args() args: DeleteTeamUserArgs
  ): Promise<TeamUser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  async resolveFieldTeam(
    @graphql.Parent() parent: TeamUser
  ): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: TeamUser
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
