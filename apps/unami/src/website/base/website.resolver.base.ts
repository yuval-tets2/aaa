/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateWebsiteArgs } from "./CreateWebsiteArgs";
import { UpdateWebsiteArgs } from "./UpdateWebsiteArgs";
import { DeleteWebsiteArgs } from "./DeleteWebsiteArgs";
import { WebsiteCountArgs } from "./WebsiteCountArgs";
import { WebsiteFindManyArgs } from "./WebsiteFindManyArgs";
import { WebsiteFindUniqueArgs } from "./WebsiteFindUniqueArgs";
import { Website } from "./Website";
import { EventDatumFindManyArgs } from "../../eventDatum/base/EventDatumFindManyArgs";
import { EventDatum } from "../../eventDatum/base/EventDatum";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { SessionDatumFindManyArgs } from "../../sessionDatum/base/SessionDatumFindManyArgs";
import { SessionDatum } from "../../sessionDatum/base/SessionDatum";
import { TeamWebsiteFindManyArgs } from "../../teamWebsite/base/TeamWebsiteFindManyArgs";
import { TeamWebsite } from "../../teamWebsite/base/TeamWebsite";
import { User } from "../../user/base/User";
import { WebsiteService } from "../website.service";
@graphql.Resolver(() => Website)
export class WebsiteResolverBase {
  constructor(protected readonly service: WebsiteService) {}

  async _websitesMeta(
    @graphql.Args() args: WebsiteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Website])
  async websites(
    @graphql.Args() args: WebsiteFindManyArgs
  ): Promise<Website[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Website, { nullable: true })
  async website(
    @graphql.Args() args: WebsiteFindUniqueArgs
  ): Promise<Website | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Website)
  async createWebsite(
    @graphql.Args() args: CreateWebsiteArgs
  ): Promise<Website> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Website)
  async updateWebsite(
    @graphql.Args() args: UpdateWebsiteArgs
  ): Promise<Website | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Website)
  async deleteWebsite(
    @graphql.Args() args: DeleteWebsiteArgs
  ): Promise<Website | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [EventDatum], { name: "eventData" })
  async resolveFieldEventData(
    @graphql.Parent() parent: Website,
    @graphql.Args() args: EventDatumFindManyArgs
  ): Promise<EventDatum[]> {
    const results = await this.service.findEventData(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Report], { name: "report" })
  async resolveFieldReport(
    @graphql.Parent() parent: Website,
    @graphql.Args() args: ReportFindManyArgs
  ): Promise<Report[]> {
    const results = await this.service.findReport(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SessionDatum], { name: "sessionData" })
  async resolveFieldSessionData(
    @graphql.Parent() parent: Website,
    @graphql.Args() args: SessionDatumFindManyArgs
  ): Promise<SessionDatum[]> {
    const results = await this.service.findSessionData(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TeamWebsite], { name: "teamWebsite" })
  async resolveFieldTeamWebsite(
    @graphql.Parent() parent: Website,
    @graphql.Args() args: TeamWebsiteFindManyArgs
  ): Promise<TeamWebsite[]> {
    const results = await this.service.findTeamWebsite(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: Website
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
