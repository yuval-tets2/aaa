/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Account } from "../../account/base/Account";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumUserIdentityProvider } from "./EnumUserIdentityProvider";
import { Invite } from "../../invite/base/Invite";
import { Membership } from "../../membership/base/Membership";
import { IsJSONValue } from "@app/custom-validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { EnumUserObjective } from "./EnumUserObjective";
import { ResponseNote } from "../../responseNote/base/ResponseNote";
import { EnumUserRole } from "./EnumUserRole";

@ObjectType()
class User {
  @ApiProperty({
    required: false,
    type: () => [Account],
  })
  @ValidateNested()
  @Type(() => Account)
  @IsOptional()
  accounts?: Array<Account>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  emailVerified!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  groupId!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    enum: EnumUserIdentityProvider,
  })
  @IsEnum(EnumUserIdentityProvider)
  @Field(() => EnumUserIdentityProvider, {
    nullable: true,
  })
  identityProvider?: "email" | "github" | "google";

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  identityProviderAccountId!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Invite],
  })
  @ValidateNested()
  @Type(() => Invite)
  @IsOptional()
  invitesAccepted?: Array<Invite>;

  @ApiProperty({
    required: false,
    type: () => [Invite],
  })
  @ValidateNested()
  @Type(() => Invite)
  @IsOptional()
  invitesCreated?: Array<Invite>;

  @ApiProperty({
    required: false,
    type: () => [Membership],
  })
  @ValidateNested()
  @Type(() => Membership)
  @IsOptional()
  memberships?: Array<Membership>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsJSONValue()
  @Field(() => GraphQLJSON)
  notificationSettings!: JsonValue;

  @ApiProperty({
    required: false,
    enum: EnumUserObjective,
  })
  @IsEnum(EnumUserObjective)
  @IsOptional()
  @Field(() => EnumUserObjective, {
    nullable: true,
  })
  objective?:
    | "increase_conversion"
    | "improve_user_retention"
    | "increase_user_adoption"
    | "sharpen_marketing_messaging"
    | "support_sales"
    | "other"
    | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  onboardingCompleted!: boolean;

  @ApiProperty({
    required: false,
    type: () => [ResponseNote],
  })
  @ValidateNested()
  @Type(() => ResponseNote)
  @IsOptional()
  responseNotes?: Array<ResponseNote>;

  @ApiProperty({
    required: false,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @IsOptional()
  @Field(() => EnumUserRole, {
    nullable: true,
  })
  role?:
    | "project_manager"
    | "engineer"
    | "founder"
    | "marketing_specialist"
    | "other"
    | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { User as User };
