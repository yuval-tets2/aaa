/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSurveyTriggerArgs } from "./CreateSurveyTriggerArgs";
import { UpdateSurveyTriggerArgs } from "./UpdateSurveyTriggerArgs";
import { DeleteSurveyTriggerArgs } from "./DeleteSurveyTriggerArgs";
import { SurveyTriggerCountArgs } from "./SurveyTriggerCountArgs";
import { SurveyTriggerFindManyArgs } from "./SurveyTriggerFindManyArgs";
import { SurveyTriggerFindUniqueArgs } from "./SurveyTriggerFindUniqueArgs";
import { SurveyTrigger } from "./SurveyTrigger";
import { EventClass } from "../../eventClass/base/EventClass";
import { Survey } from "../../survey/base/Survey";
import { SurveyTriggerService } from "../surveyTrigger.service";
@graphql.Resolver(() => SurveyTrigger)
export class SurveyTriggerResolverBase {
  constructor(protected readonly service: SurveyTriggerService) {}

  async _surveyTriggersMeta(
    @graphql.Args() args: SurveyTriggerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SurveyTrigger])
  async surveyTriggers(
    @graphql.Args() args: SurveyTriggerFindManyArgs
  ): Promise<SurveyTrigger[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SurveyTrigger, { nullable: true })
  async surveyTrigger(
    @graphql.Args() args: SurveyTriggerFindUniqueArgs
  ): Promise<SurveyTrigger | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SurveyTrigger)
  async createSurveyTrigger(
    @graphql.Args() args: CreateSurveyTriggerArgs
  ): Promise<SurveyTrigger> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        eventClass: {
          connect: args.data.eventClass,
        },

        survey: {
          connect: args.data.survey,
        },
      },
    });
  }

  @graphql.Mutation(() => SurveyTrigger)
  async updateSurveyTrigger(
    @graphql.Args() args: UpdateSurveyTriggerArgs
  ): Promise<SurveyTrigger | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          eventClass: {
            connect: args.data.eventClass,
          },

          survey: {
            connect: args.data.survey,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SurveyTrigger)
  async deleteSurveyTrigger(
    @graphql.Args() args: DeleteSurveyTriggerArgs
  ): Promise<SurveyTrigger | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => EventClass, {
    nullable: true,
    name: "eventClass",
  })
  async resolveFieldEventClass(
    @graphql.Parent() parent: SurveyTrigger
  ): Promise<EventClass | null> {
    const result = await this.service.getEventClass(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Survey, {
    nullable: true,
    name: "survey",
  })
  async resolveFieldSurvey(
    @graphql.Parent() parent: SurveyTrigger
  ): Promise<Survey | null> {
    const result = await this.service.getSurvey(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
