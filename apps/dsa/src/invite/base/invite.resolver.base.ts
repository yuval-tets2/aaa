/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateInviteArgs } from "./CreateInviteArgs";
import { UpdateInviteArgs } from "./UpdateInviteArgs";
import { DeleteInviteArgs } from "./DeleteInviteArgs";
import { InviteCountArgs } from "./InviteCountArgs";
import { InviteFindManyArgs } from "./InviteFindManyArgs";
import { InviteFindUniqueArgs } from "./InviteFindUniqueArgs";
import { Invite } from "./Invite";
import { User } from "../../user/base/User";
import { Team } from "../../team/base/Team";
import { InviteService } from "../invite.service";
@graphql.Resolver(() => Invite)
export class InviteResolverBase {
  constructor(protected readonly service: InviteService) {}

  async _invitesMeta(
    @graphql.Args() args: InviteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Invite])
  async invites(@graphql.Args() args: InviteFindManyArgs): Promise<Invite[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Invite, { nullable: true })
  async invite(
    @graphql.Args() args: InviteFindUniqueArgs
  ): Promise<Invite | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Invite)
  async createInvite(@graphql.Args() args: CreateInviteArgs): Promise<Invite> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        acceptor: args.data.acceptor
          ? {
              connect: args.data.acceptor,
            }
          : undefined,

        creator: {
          connect: args.data.creator,
        },

        team: {
          connect: args.data.team,
        },
      },
    });
  }

  @graphql.Mutation(() => Invite)
  async updateInvite(
    @graphql.Args() args: UpdateInviteArgs
  ): Promise<Invite | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          acceptor: args.data.acceptor
            ? {
                connect: args.data.acceptor,
              }
            : undefined,

          creator: {
            connect: args.data.creator,
          },

          team: {
            connect: args.data.team,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Invite)
  async deleteInvite(
    @graphql.Args() args: DeleteInviteArgs
  ): Promise<Invite | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "acceptor",
  })
  async resolveFieldAcceptor(
    @graphql.Parent() parent: Invite
  ): Promise<User | null> {
    const result = await this.service.getAcceptor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "creator",
  })
  async resolveFieldCreator(
    @graphql.Parent() parent: Invite
  ): Promise<User | null> {
    const result = await this.service.getCreator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  async resolveFieldTeam(
    @graphql.Parent() parent: Invite
  ): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
