/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagArgs } from "./CreateTagArgs";
import { UpdateTagArgs } from "./UpdateTagArgs";
import { DeleteTagArgs } from "./DeleteTagArgs";
import { TagCountArgs } from "./TagCountArgs";
import { TagFindManyArgs } from "./TagFindManyArgs";
import { TagFindUniqueArgs } from "./TagFindUniqueArgs";
import { Tag } from "./Tag";
import { TagsOnResponseFindManyArgs } from "../../tagsOnResponse/base/TagsOnResponseFindManyArgs";
import { TagsOnResponse } from "../../tagsOnResponse/base/TagsOnResponse";
import { Environment } from "../../environment/base/Environment";
import { TagService } from "../tag.service";
@graphql.Resolver(() => Tag)
export class TagResolverBase {
  constructor(protected readonly service: TagService) {}

  async _tagsMeta(
    @graphql.Args() args: TagCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tag])
  async tags(@graphql.Args() args: TagFindManyArgs): Promise<Tag[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Tag, { nullable: true })
  async tag(@graphql.Args() args: TagFindUniqueArgs): Promise<Tag | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tag)
  async createTag(@graphql.Args() args: CreateTagArgs): Promise<Tag> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        environment: {
          connect: args.data.environment,
        },
      },
    });
  }

  @graphql.Mutation(() => Tag)
  async updateTag(@graphql.Args() args: UpdateTagArgs): Promise<Tag | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          environment: {
            connect: args.data.environment,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tag)
  async deleteTag(@graphql.Args() args: DeleteTagArgs): Promise<Tag | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TagsOnResponse], { name: "responses" })
  async resolveFieldResponses(
    @graphql.Parent() parent: Tag,
    @graphql.Args() args: TagsOnResponseFindManyArgs
  ): Promise<TagsOnResponse[]> {
    const results = await this.service.findResponses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Environment, {
    nullable: true,
    name: "environment",
  })
  async resolveFieldEnvironment(
    @graphql.Parent() parent: Tag
  ): Promise<Environment | null> {
    const result = await this.service.getEnvironment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
