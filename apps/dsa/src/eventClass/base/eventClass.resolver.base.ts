/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateEventClassArgs } from "./CreateEventClassArgs";
import { UpdateEventClassArgs } from "./UpdateEventClassArgs";
import { DeleteEventClassArgs } from "./DeleteEventClassArgs";
import { EventClassCountArgs } from "./EventClassCountArgs";
import { EventClassFindManyArgs } from "./EventClassFindManyArgs";
import { EventClassFindUniqueArgs } from "./EventClassFindUniqueArgs";
import { EventClass } from "./EventClass";
import { EventFindManyArgs } from "../../event/base/EventFindManyArgs";
import { Event } from "../../event/base/Event";
import { SurveyTriggerFindManyArgs } from "../../surveyTrigger/base/SurveyTriggerFindManyArgs";
import { SurveyTrigger } from "../../surveyTrigger/base/SurveyTrigger";
import { Environment } from "../../environment/base/Environment";
import { EventClassService } from "../eventClass.service";
@graphql.Resolver(() => EventClass)
export class EventClassResolverBase {
  constructor(protected readonly service: EventClassService) {}

  async _eventClassesMeta(
    @graphql.Args() args: EventClassCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EventClass])
  async eventClasses(
    @graphql.Args() args: EventClassFindManyArgs
  ): Promise<EventClass[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => EventClass, { nullable: true })
  async eventClass(
    @graphql.Args() args: EventClassFindUniqueArgs
  ): Promise<EventClass | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EventClass)
  async createEventClass(
    @graphql.Args() args: CreateEventClassArgs
  ): Promise<EventClass> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        environment: {
          connect: args.data.environment,
        },
      },
    });
  }

  @graphql.Mutation(() => EventClass)
  async updateEventClass(
    @graphql.Args() args: UpdateEventClassArgs
  ): Promise<EventClass | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          environment: {
            connect: args.data.environment,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventClass)
  async deleteEventClass(
    @graphql.Args() args: DeleteEventClassArgs
  ): Promise<EventClass | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Event], { name: "events" })
  async resolveFieldEvents(
    @graphql.Parent() parent: EventClass,
    @graphql.Args() args: EventFindManyArgs
  ): Promise<Event[]> {
    const results = await this.service.findEvents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SurveyTrigger], { name: "surveys" })
  async resolveFieldSurveys(
    @graphql.Parent() parent: EventClass,
    @graphql.Args() args: SurveyTriggerFindManyArgs
  ): Promise<SurveyTrigger[]> {
    const results = await this.service.findSurveys(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Environment, {
    nullable: true,
    name: "environment",
  })
  async resolveFieldEnvironment(
    @graphql.Parent() parent: EventClass
  ): Promise<Environment | null> {
    const result = await this.service.getEnvironment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
