/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SurveyService } from "../survey.service";
import { SurveyCreateInput } from "./SurveyCreateInput";
import { SurveyWhereInput } from "./SurveyWhereInput";
import { SurveyWhereUniqueInput } from "./SurveyWhereUniqueInput";
import { SurveyFindManyArgs } from "./SurveyFindManyArgs";
import { SurveyUpdateInput } from "./SurveyUpdateInput";
import { Survey } from "./Survey";
import { SurveyAttributeFilterFindManyArgs } from "../../surveyAttributeFilter/base/SurveyAttributeFilterFindManyArgs";
import { SurveyAttributeFilter } from "../../surveyAttributeFilter/base/SurveyAttributeFilter";
import { SurveyAttributeFilterWhereUniqueInput } from "../../surveyAttributeFilter/base/SurveyAttributeFilterWhereUniqueInput";
import { DisplayFindManyArgs } from "../../display/base/DisplayFindManyArgs";
import { Display } from "../../display/base/Display";
import { DisplayWhereUniqueInput } from "../../display/base/DisplayWhereUniqueInput";
import { ResponseFindManyArgs } from "../../response/base/ResponseFindManyArgs";
import { Response } from "../../response/base/Response";
import { ResponseWhereUniqueInput } from "../../response/base/ResponseWhereUniqueInput";
import { SurveyTriggerFindManyArgs } from "../../surveyTrigger/base/SurveyTriggerFindManyArgs";
import { SurveyTrigger } from "../../surveyTrigger/base/SurveyTrigger";
import { SurveyTriggerWhereUniqueInput } from "../../surveyTrigger/base/SurveyTriggerWhereUniqueInput";

export class SurveyControllerBase {
  constructor(protected readonly service: SurveyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Survey })
  async create(@common.Body() data: SurveyCreateInput): Promise<Survey> {
    return await this.service.create({
      data: {
        ...data,

        environment: {
          connect: data.environment,
        },
      },
      select: {
        autoClose: true,
        autoComplete: true,
        closeOnDate: true,
        createdAt: true,
        delay: true,
        displayOption: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        questions: true,
        recontactDays: true,
        redirectUrl: true,
        status: true,
        surveyClosedMessage: true,
        thankYouCard: true,
        type: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Survey] })
  @ApiNestedQuery(SurveyFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Survey[]> {
    const args = plainToClass(SurveyFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        autoClose: true,
        autoComplete: true,
        closeOnDate: true,
        createdAt: true,
        delay: true,
        displayOption: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        questions: true,
        recontactDays: true,
        redirectUrl: true,
        status: true,
        surveyClosedMessage: true,
        thankYouCard: true,
        type: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Survey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: SurveyWhereUniqueInput
  ): Promise<Survey | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        autoClose: true,
        autoComplete: true,
        closeOnDate: true,
        createdAt: true,
        delay: true,
        displayOption: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        questions: true,
        recontactDays: true,
        redirectUrl: true,
        status: true,
        surveyClosedMessage: true,
        thankYouCard: true,
        type: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Survey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() data: SurveyUpdateInput
  ): Promise<Survey | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          environment: {
            connect: data.environment,
          },
        },
        select: {
          autoClose: true,
          autoComplete: true,
          closeOnDate: true,
          createdAt: true,
          delay: true,
          displayOption: true,

          environment: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          questions: true,
          recontactDays: true,
          redirectUrl: true,
          status: true,
          surveyClosedMessage: true,
          thankYouCard: true,
          type: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Survey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: SurveyWhereUniqueInput
  ): Promise<Survey | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          autoClose: true,
          autoComplete: true,
          closeOnDate: true,
          createdAt: true,
          delay: true,
          displayOption: true,

          environment: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          questions: true,
          recontactDays: true,
          redirectUrl: true,
          status: true,
          surveyClosedMessage: true,
          thankYouCard: true,
          type: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/attributeFilters")
  @ApiNestedQuery(SurveyAttributeFilterFindManyArgs)
  async findManyAttributeFilters(
    @common.Req() request: Request,
    @common.Param() params: SurveyWhereUniqueInput
  ): Promise<SurveyAttributeFilter[]> {
    const query = plainToClass(
      SurveyAttributeFilterFindManyArgs,
      request.query
    );
    const results = await this.service.findAttributeFilters(params.id, {
      ...query,
      select: {
        attributeClass: {
          select: {
            id: true,
          },
        },

        condition: true,
        createdAt: true,
        id: true,

        survey: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attributeFilters")
  async connectAttributeFilters(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: SurveyAttributeFilterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributeFilters: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attributeFilters")
  async updateAttributeFilters(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: SurveyAttributeFilterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributeFilters: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attributeFilters")
  async disconnectAttributeFilters(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: SurveyAttributeFilterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributeFilters: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/displays")
  @ApiNestedQuery(DisplayFindManyArgs)
  async findManyDisplays(
    @common.Req() request: Request,
    @common.Param() params: SurveyWhereUniqueInput
  ): Promise<Display[]> {
    const query = plainToClass(DisplayFindManyArgs, request.query);
    const results = await this.service.findDisplays(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        status: true,

        survey: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/displays")
  async connectDisplays(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: DisplayWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      displays: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/displays")
  async updateDisplays(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: DisplayWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      displays: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/displays")
  async disconnectDisplays(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: DisplayWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      displays: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/responses")
  @ApiNestedQuery(ResponseFindManyArgs)
  async findManyResponses(
    @common.Req() request: Request,
    @common.Param() params: SurveyWhereUniqueInput
  ): Promise<Response[]> {
    const query = plainToClass(ResponseFindManyArgs, request.query);
    const results = await this.service.findResponses(params.id, {
      ...query,
      select: {
        createdAt: true,
        data: true,
        finished: true,
        id: true,
        meta: true,

        person: {
          select: {
            id: true,
          },
        },

        personAttributes: true,

        survey: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/responses")
  async connectResponses(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: ResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      responses: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/responses")
  async updateResponses(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: ResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      responses: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/responses")
  async disconnectResponses(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: ResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      responses: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/triggers")
  @ApiNestedQuery(SurveyTriggerFindManyArgs)
  async findManyTriggers(
    @common.Req() request: Request,
    @common.Param() params: SurveyWhereUniqueInput
  ): Promise<SurveyTrigger[]> {
    const query = plainToClass(SurveyTriggerFindManyArgs, request.query);
    const results = await this.service.findTriggers(params.id, {
      ...query,
      select: {
        createdAt: true,

        eventClass: {
          select: {
            id: true,
          },
        },

        id: true,

        survey: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/triggers")
  async connectTriggers(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: SurveyTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      triggers: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/triggers")
  async updateTriggers(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: SurveyTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      triggers: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/triggers")
  async disconnectTriggers(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() body: SurveyTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      triggers: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
