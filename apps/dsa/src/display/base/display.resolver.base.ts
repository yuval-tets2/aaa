/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateDisplayArgs } from "./CreateDisplayArgs";
import { UpdateDisplayArgs } from "./UpdateDisplayArgs";
import { DeleteDisplayArgs } from "./DeleteDisplayArgs";
import { DisplayCountArgs } from "./DisplayCountArgs";
import { DisplayFindManyArgs } from "./DisplayFindManyArgs";
import { DisplayFindUniqueArgs } from "./DisplayFindUniqueArgs";
import { Display } from "./Display";
import { Person } from "../../person/base/Person";
import { Survey } from "../../survey/base/Survey";
import { DisplayService } from "../display.service";
@graphql.Resolver(() => Display)
export class DisplayResolverBase {
  constructor(protected readonly service: DisplayService) {}

  async _displaysMeta(
    @graphql.Args() args: DisplayCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Display])
  async displays(
    @graphql.Args() args: DisplayFindManyArgs
  ): Promise<Display[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Display, { nullable: true })
  async display(
    @graphql.Args() args: DisplayFindUniqueArgs
  ): Promise<Display | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Display)
  async createDisplay(
    @graphql.Args() args: CreateDisplayArgs
  ): Promise<Display> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        person: args.data.person
          ? {
              connect: args.data.person,
            }
          : undefined,

        survey: {
          connect: args.data.survey,
        },
      },
    });
  }

  @graphql.Mutation(() => Display)
  async updateDisplay(
    @graphql.Args() args: UpdateDisplayArgs
  ): Promise<Display | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          person: args.data.person
            ? {
                connect: args.data.person,
              }
            : undefined,

          survey: {
            connect: args.data.survey,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Display)
  async deleteDisplay(
    @graphql.Args() args: DeleteDisplayArgs
  ): Promise<Display | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  async resolveFieldPerson(
    @graphql.Parent() parent: Display
  ): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Survey, {
    nullable: true,
    name: "survey",
  })
  async resolveFieldSurvey(
    @graphql.Parent() parent: Display
  ): Promise<Survey | null> {
    const result = await this.service.getSurvey(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
