/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSurveyAttributeFilterArgs } from "./CreateSurveyAttributeFilterArgs";
import { UpdateSurveyAttributeFilterArgs } from "./UpdateSurveyAttributeFilterArgs";
import { DeleteSurveyAttributeFilterArgs } from "./DeleteSurveyAttributeFilterArgs";
import { SurveyAttributeFilterCountArgs } from "./SurveyAttributeFilterCountArgs";
import { SurveyAttributeFilterFindManyArgs } from "./SurveyAttributeFilterFindManyArgs";
import { SurveyAttributeFilterFindUniqueArgs } from "./SurveyAttributeFilterFindUniqueArgs";
import { SurveyAttributeFilter } from "./SurveyAttributeFilter";
import { AttributeClass } from "../../attributeClass/base/AttributeClass";
import { Survey } from "../../survey/base/Survey";
import { SurveyAttributeFilterService } from "../surveyAttributeFilter.service";
@graphql.Resolver(() => SurveyAttributeFilter)
export class SurveyAttributeFilterResolverBase {
  constructor(protected readonly service: SurveyAttributeFilterService) {}

  async _surveyAttributeFiltersMeta(
    @graphql.Args() args: SurveyAttributeFilterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SurveyAttributeFilter])
  async surveyAttributeFilters(
    @graphql.Args() args: SurveyAttributeFilterFindManyArgs
  ): Promise<SurveyAttributeFilter[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SurveyAttributeFilter, { nullable: true })
  async surveyAttributeFilter(
    @graphql.Args() args: SurveyAttributeFilterFindUniqueArgs
  ): Promise<SurveyAttributeFilter | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SurveyAttributeFilter)
  async createSurveyAttributeFilter(
    @graphql.Args() args: CreateSurveyAttributeFilterArgs
  ): Promise<SurveyAttributeFilter> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        attributeClass: {
          connect: args.data.attributeClass,
        },

        survey: {
          connect: args.data.survey,
        },
      },
    });
  }

  @graphql.Mutation(() => SurveyAttributeFilter)
  async updateSurveyAttributeFilter(
    @graphql.Args() args: UpdateSurveyAttributeFilterArgs
  ): Promise<SurveyAttributeFilter | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          attributeClass: {
            connect: args.data.attributeClass,
          },

          survey: {
            connect: args.data.survey,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SurveyAttributeFilter)
  async deleteSurveyAttributeFilter(
    @graphql.Args() args: DeleteSurveyAttributeFilterArgs
  ): Promise<SurveyAttributeFilter | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => AttributeClass, {
    nullable: true,
    name: "attributeClass",
  })
  async resolveFieldAttributeClass(
    @graphql.Parent() parent: SurveyAttributeFilter
  ): Promise<AttributeClass | null> {
    const result = await this.service.getAttributeClass(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Survey, {
    nullable: true,
    name: "survey",
  })
  async resolveFieldSurvey(
    @graphql.Parent() parent: SurveyAttributeFilter
  ): Promise<Survey | null> {
    const result = await this.service.getSurvey(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
