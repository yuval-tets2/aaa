/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EnvironmentService } from "../environment.service";
import { EnvironmentCreateInput } from "./EnvironmentCreateInput";
import { EnvironmentWhereInput } from "./EnvironmentWhereInput";
import { EnvironmentWhereUniqueInput } from "./EnvironmentWhereUniqueInput";
import { EnvironmentFindManyArgs } from "./EnvironmentFindManyArgs";
import { EnvironmentUpdateInput } from "./EnvironmentUpdateInput";
import { Environment } from "./Environment";
import { ApiKeyFindManyArgs } from "../../apiKey/base/ApiKeyFindManyArgs";
import { ApiKey } from "../../apiKey/base/ApiKey";
import { ApiKeyWhereUniqueInput } from "../../apiKey/base/ApiKeyWhereUniqueInput";
import { AttributeClassFindManyArgs } from "../../attributeClass/base/AttributeClassFindManyArgs";
import { AttributeClass } from "../../attributeClass/base/AttributeClass";
import { AttributeClassWhereUniqueInput } from "../../attributeClass/base/AttributeClassWhereUniqueInput";
import { EventClassFindManyArgs } from "../../eventClass/base/EventClassFindManyArgs";
import { EventClass } from "../../eventClass/base/EventClass";
import { EventClassWhereUniqueInput } from "../../eventClass/base/EventClassWhereUniqueInput";
import { PersonFindManyArgs } from "../../person/base/PersonFindManyArgs";
import { Person } from "../../person/base/Person";
import { PersonWhereUniqueInput } from "../../person/base/PersonWhereUniqueInput";
import { SurveyFindManyArgs } from "../../survey/base/SurveyFindManyArgs";
import { Survey } from "../../survey/base/Survey";
import { SurveyWhereUniqueInput } from "../../survey/base/SurveyWhereUniqueInput";
import { TagFindManyArgs } from "../../tag/base/TagFindManyArgs";
import { Tag } from "../../tag/base/Tag";
import { TagWhereUniqueInput } from "../../tag/base/TagWhereUniqueInput";
import { WebhookFindManyArgs } from "../../webhook/base/WebhookFindManyArgs";
import { Webhook } from "../../webhook/base/Webhook";
import { WebhookWhereUniqueInput } from "../../webhook/base/WebhookWhereUniqueInput";

export class EnvironmentControllerBase {
  constructor(protected readonly service: EnvironmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Environment })
  async create(
    @common.Body() data: EnvironmentCreateInput
  ): Promise<Environment> {
    return await this.service.create({
      data: {
        ...data,

        product: {
          connect: data.product,
        },
      },
      select: {
        createdAt: true,
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        type: true,
        updatedAt: true,
        widgetSetupCompleted: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Environment] })
  @ApiNestedQuery(EnvironmentFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Environment[]> {
    const args = plainToClass(EnvironmentFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        type: true,
        updatedAt: true,
        widgetSetupCompleted: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Environment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<Environment | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        type: true,
        updatedAt: true,
        widgetSetupCompleted: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Environment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() data: EnvironmentUpdateInput
  ): Promise<Environment | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          product: {
            connect: data.product,
          },
        },
        select: {
          createdAt: true,
          id: true,

          product: {
            select: {
              id: true,
            },
          },

          type: true,
          updatedAt: true,
          widgetSetupCompleted: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Environment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<Environment | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          id: true,

          product: {
            select: {
              id: true,
            },
          },

          type: true,
          updatedAt: true,
          widgetSetupCompleted: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/apiKeys")
  @ApiNestedQuery(ApiKeyFindManyArgs)
  async findManyApiKeys(
    @common.Req() request: Request,
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<ApiKey[]> {
    const query = plainToClass(ApiKeyFindManyArgs, request.query);
    const results = await this.service.findApiKeys(params.id, {
      ...query,
      select: {
        createdAt: true,

        environment: {
          select: {
            id: true,
          },
        },

        hashedKey: true,
        id: true,
        label: true,
        lastUsedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/apiKeys")
  async connectApiKeys(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/apiKeys")
  async updateApiKeys(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/apiKeys")
  async disconnectApiKeys(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/attributeClasses")
  @ApiNestedQuery(AttributeClassFindManyArgs)
  async findManyAttributeClasses(
    @common.Req() request: Request,
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<AttributeClass[]> {
    const query = plainToClass(AttributeClassFindManyArgs, request.query);
    const results = await this.service.findAttributeClasses(params.id, {
      ...query,
      select: {
        archived: true,
        createdAt: true,
        description: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        type: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attributeClasses")
  async connectAttributeClasses(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: AttributeClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributeClasses: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attributeClasses")
  async updateAttributeClasses(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: AttributeClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributeClasses: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attributeClasses")
  async disconnectAttributeClasses(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: AttributeClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributeClasses: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/eventClasses")
  @ApiNestedQuery(EventClassFindManyArgs)
  async findManyEventClasses(
    @common.Req() request: Request,
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<EventClass[]> {
    const query = plainToClass(EventClassFindManyArgs, request.query);
    const results = await this.service.findEventClasses(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        noCodeConfig: true,
        type: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/eventClasses")
  async connectEventClasses(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: EventClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventClasses: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/eventClasses")
  async updateEventClasses(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: EventClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventClasses: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/eventClasses")
  async disconnectEventClasses(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: EventClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventClasses: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/people")
  @ApiNestedQuery(PersonFindManyArgs)
  async findManyPeople(
    @common.Req() request: Request,
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<Person[]> {
    const query = plainToClass(PersonFindManyArgs, request.query);
    const results = await this.service.findPeople(params.id, {
      ...query,
      select: {
        createdAt: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/people")
  async connectPeople(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: PersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      people: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/people")
  async updatePeople(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: PersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      people: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/people")
  async disconnectPeople(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: PersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      people: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/surveys")
  @ApiNestedQuery(SurveyFindManyArgs)
  async findManySurveys(
    @common.Req() request: Request,
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<Survey[]> {
    const query = plainToClass(SurveyFindManyArgs, request.query);
    const results = await this.service.findSurveys(params.id, {
      ...query,
      select: {
        autoClose: true,
        autoComplete: true,
        closeOnDate: true,
        createdAt: true,
        delay: true,
        displayOption: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        questions: true,
        recontactDays: true,
        redirectUrl: true,
        status: true,
        surveyClosedMessage: true,
        thankYouCard: true,
        type: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/surveys")
  async connectSurveys(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: SurveyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      surveys: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/surveys")
  async updateSurveys(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: SurveyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      surveys: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/surveys")
  async disconnectSurveys(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: SurveyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      surveys: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tags")
  @ApiNestedQuery(TagFindManyArgs)
  async findManyTags(
    @common.Req() request: Request,
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<Tag[]> {
    const query = plainToClass(TagFindManyArgs, request.query);
    const results = await this.service.findTags(params.id, {
      ...query,
      select: {
        createdAt: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tags")
  async connectTags(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tags")
  async updateTags(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tags")
  async disconnectTags(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/webhooks")
  @ApiNestedQuery(WebhookFindManyArgs)
  async findManyWebhooks(
    @common.Req() request: Request,
    @common.Param() params: EnvironmentWhereUniqueInput
  ): Promise<Webhook[]> {
    const query = plainToClass(WebhookFindManyArgs, request.query);
    const results = await this.service.findWebhooks(params.id, {
      ...query,
      select: {
        createdAt: true,

        environment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        surveyIds: true,
        triggers: true,
        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/webhooks")
  async connectWebhooks(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: WebhookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webhooks: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/webhooks")
  async updateWebhooks(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: WebhookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webhooks: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/webhooks")
  async disconnectWebhooks(
    @common.Param() params: EnvironmentWhereUniqueInput,
    @common.Body() body: WebhookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webhooks: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
