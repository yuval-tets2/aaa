/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ApiKey } from "../../apiKey/base/ApiKey";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { AttributeClass } from "../../attributeClass/base/AttributeClass";
import { EventClass } from "../../eventClass/base/EventClass";
import { Person } from "../../person/base/Person";
import { Product } from "../../product/base/Product";
import { Survey } from "../../survey/base/Survey";
import { Tag } from "../../tag/base/Tag";
import { EnumEnvironmentType } from "./EnumEnvironmentType";
import { Webhook } from "../../webhook/base/Webhook";

@ObjectType()
class Environment {
  @ApiProperty({
    required: false,
    type: () => [ApiKey],
  })
  @ValidateNested()
  @Type(() => ApiKey)
  @IsOptional()
  apiKeys?: Array<ApiKey>;

  @ApiProperty({
    required: false,
    type: () => [AttributeClass],
  })
  @ValidateNested()
  @Type(() => AttributeClass)
  @IsOptional()
  attributeClasses?: Array<AttributeClass>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [EventClass],
  })
  @ValidateNested()
  @Type(() => EventClass)
  @IsOptional()
  eventClasses?: Array<EventClass>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Person],
  })
  @ValidateNested()
  @Type(() => Person)
  @IsOptional()
  people?: Array<Person>;

  @ApiProperty({
    required: true,
    type: () => Product,
  })
  @ValidateNested()
  @Type(() => Product)
  product?: Product;

  @ApiProperty({
    required: false,
    type: () => [Survey],
  })
  @ValidateNested()
  @Type(() => Survey)
  @IsOptional()
  surveys?: Array<Survey>;

  @ApiProperty({
    required: false,
    type: () => [Tag],
  })
  @ValidateNested()
  @Type(() => Tag)
  @IsOptional()
  tags?: Array<Tag>;

  @ApiProperty({
    required: true,
    enum: EnumEnvironmentType,
  })
  @IsEnum(EnumEnvironmentType)
  @Field(() => EnumEnvironmentType, {
    nullable: true,
  })
  type?: "production" | "development";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [Webhook],
  })
  @ValidateNested()
  @Type(() => Webhook)
  @IsOptional()
  webhooks?: Array<Webhook>;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  widgetSetupCompleted!: boolean;
}

export { Environment as Environment };
