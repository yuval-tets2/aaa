/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsBoolean,
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
} from "class-validator";
import { SurveyAttributeFilter } from "../../surveyAttributeFilter/base/SurveyAttributeFilter";
import { Type } from "class-transformer";
import { Attribute } from "../../attribute/base/Attribute";
import { Environment } from "../../environment/base/Environment";
import { EnumAttributeClassType } from "./EnumAttributeClassType";

@ObjectType()
class AttributeClass {
  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  archived!: boolean;

  @ApiProperty({
    required: false,
    type: () => [SurveyAttributeFilter],
  })
  @ValidateNested()
  @Type(() => SurveyAttributeFilter)
  @IsOptional()
  attributeFilters?: Array<SurveyAttributeFilter>;

  @ApiProperty({
    required: false,
    type: () => [Attribute],
  })
  @ValidateNested()
  @Type(() => Attribute)
  @IsOptional()
  attributes?: Array<Attribute>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: true,
    type: () => Environment,
  })
  @ValidateNested()
  @Type(() => Environment)
  environment?: Environment;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    enum: EnumAttributeClassType,
  })
  @IsEnum(EnumAttributeClassType)
  @Field(() => EnumAttributeClassType, {
    nullable: true,
  })
  type?: "code" | "noCode" | "automatic";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { AttributeClass as AttributeClass };
