/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTagsOnResponseArgs } from "./CreateTagsOnResponseArgs";
import { UpdateTagsOnResponseArgs } from "./UpdateTagsOnResponseArgs";
import { DeleteTagsOnResponseArgs } from "./DeleteTagsOnResponseArgs";
import { TagsOnResponseCountArgs } from "./TagsOnResponseCountArgs";
import { TagsOnResponseFindManyArgs } from "./TagsOnResponseFindManyArgs";
import { TagsOnResponseFindUniqueArgs } from "./TagsOnResponseFindUniqueArgs";
import { TagsOnResponse } from "./TagsOnResponse";
import { Response } from "../../response/base/Response";
import { Tag } from "../../tag/base/Tag";
import { TagsOnResponseService } from "../tagsOnResponse.service";
@graphql.Resolver(() => TagsOnResponse)
export class TagsOnResponseResolverBase {
  constructor(protected readonly service: TagsOnResponseService) {}

  async _tagsOnResponsesMeta(
    @graphql.Args() args: TagsOnResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagsOnResponse])
  async tagsOnResponses(
    @graphql.Args() args: TagsOnResponseFindManyArgs
  ): Promise<TagsOnResponse[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TagsOnResponse, { nullable: true })
  async tagsOnResponse(
    @graphql.Args() args: TagsOnResponseFindUniqueArgs
  ): Promise<TagsOnResponse | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagsOnResponse)
  async createTagsOnResponse(
    @graphql.Args() args: CreateTagsOnResponseArgs
  ): Promise<TagsOnResponse> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        response: {
          connect: args.data.response,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagsOnResponse)
  async updateTagsOnResponse(
    @graphql.Args() args: UpdateTagsOnResponseArgs
  ): Promise<TagsOnResponse | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          response: {
            connect: args.data.response,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagsOnResponse)
  async deleteTagsOnResponse(
    @graphql.Args() args: DeleteTagsOnResponseArgs
  ): Promise<TagsOnResponse | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Response, {
    nullable: true,
    name: "response",
  })
  async resolveFieldResponse(
    @graphql.Parent() parent: TagsOnResponse
  ): Promise<Response | null> {
    const result = await this.service.getResponse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async resolveFieldTag(
    @graphql.Parent() parent: TagsOnResponse
  ): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
